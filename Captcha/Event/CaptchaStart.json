{
  "name": "CaptchaStart",
  "temp": "memberJoined",
  "event-type": "1",
  "_id": "tbmZg",
  "actions": [
    {
      "behavior": "1",
      "interpretation": "1",
      "code": "if (globalVars(\"capchaStartAlreadyRan\") == null) {\n    const request = require(\"request\");\n    const Discord = require('discord.js');\n    const fs = require('fs');\n    var checkUpdates = true;\n\n    this.storeValue(true, 3, \"capchaStartAlreadyRan\", cache);\n\n    if (checkUpdates) {\n        request('https://raw.githubusercontent.com/ItzPike/DBM-Rawdata-Releases/master/Captcha/versionCheck.json', function(error, response, body) {\n            if (response.statusCode == 200) {\n                var allVersions = JSON.parse(body);\n\n                var commandVersions = {};\n                var eventVersions = {};\n                var commandKeys = [];\n                var eventKeys = [];\n\n                allVersions[\"commands\"].forEach(commandVer => {\n                    commandVersions[commandVer[0]] = commandVer[1];\n                    commandKeys.push(commandVer[0]);\n                });\n\n                allVersions[\"events\"].forEach(eventVer => {\n                    eventVersions[eventVer[0]] = eventVer[1];\n                    eventKeys.push(eventVer[0])\n                })\n\n                fs.readFile(\"./data/commands.json\", async function(err, data) {\n                    var data = JSON.parse(data);\n\n                    var systemCommands = await data.filter(command => command != null && commandKeys.includes(command[\"_id\"]));\n\n                    for (i = 0; i < systemCommands.length; i++) {\n                        var systemActionFind = await systemCommands[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                        if (systemActionFind.length != 0) {\n                            var versionCheckSplit = systemActionFind[0].code.split(\"VersionCheck:\");\n                            if (versionCheckSplit[1] != null && versionCheckSplit[1] != commandVersions[systemCommands[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                console.log(`[Capcha] The command ${systemCommands[i][\"name\"]} needs an update!`)\n                            }\n                        }\n                    }\n                })\n\n                fs.readFile(\"./data/events.json\", async function(err, data) {\n                    var data = JSON.parse(data);\n\n                    var systemEvent = await data.filter(event => event != null && eventKeys.includes(event[\"_id\"]));\n\n                    for (i = 0; i < systemEvent.length; i++) {\n                        var systemEventFind = await systemEvent[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                        if (systemEventFind.length != 0) {\n                            var versionCheckSplit = systemEventFind[0].code.split(\"VersionCheck:\");\n                            if (versionCheckSplit != null && versionCheckSplit[versionCheckSplit.length - 1] != eventVersions[systemEvent[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                console.log(`[Capcha] The event ${systemEvent[i][\"name\"]} needs an update!`)\n                            }\n                        }\n                    }\n                })\n            }\n        });\n    }\n\n    client.on('guildMemberAdd', (member) => {\n        var memberJoined = member;\n        var serverRoleToGive = memberJoined.guild.data(\"serverCaptchaRole\");\n        var roleToGive;\n\n        if (serverRoleToGive != null && serverRoleToGive != 0) {\n            roleToGive = memberJoined.guild.roles.cache.get(serverRoleToGive);\n            if (roleToGive != null) {\n                getCaptcha(3, \"\");\n            } else {\n                serverRoleToGive.setData(\"serverCaptchaRole\", 0)\n            }\n        }\n\n        function getCaptcha(attempts, reason) {\n            var embed = {\n                \"title\": \"Automated Captcha System\",\n                \"description\": `Welcome to ${memberJoined.guild.name}!\\n\\nThis server is protected by a captcha system and you are required to solve the below captcha.\\n\\n**Captchas are case sesitive.**\\n\\nIf you answer wrong, you have three attempts in total to try to get it right.\\nThe captcha will refresh after every failed attempt.\\n\\nYou have 120 seconds for each captcha\\n\\n${attempts} Attempts Left\\n\\n${reason}`,\n                \"color\": 0x00ff00\n            }\n\n            if (attempts != 0) {\n                request('https://captchaGenerate.itzpike.repl.co', function(error, response, body) {\n                    if (response.statusCode == 200) {\n                        body = JSON.parse(body);\n\n                        var data = body.image.replace(/^data:image\\/\\w+;base64,/, '');\n                        var fileTitle = Math.random().toString(36).substring(6);\n                        fs.writeFile(`${fileTitle}.png`, data, {\n                            encoding: 'base64'\n                        }, function(err) {\n                            if (err) {\n                                console.log(err);\n                            }\n\n                            const file = new Discord.MessageAttachment(`${fileTitle}.png`);\n                            embed[\"image\"] = {\n                                \"url\": `attachment://${fileTitle}.png`\n                            }\n\n                            memberJoined.send({\n                                files: [file],\n                                embed: embed\n                            }).then(msgSent => {\n                                msgSent.channel.awaitMessages(m => m.author.id == memberJoined.id, {\n                                        max: 1,\n                                        time: 120000,\n                                        errors: ['time']\n                                    })\n                                    .then(collected => {\n                                        fs.unlinkSync(`${fileTitle}.png`);\n                                        msgSent.delete();\n                                        if (collected.first().content == body.key) {\n                                            memberJoined.roles.add(roleToGive);\n                                            embed.description = \"Captcha success!\\n\\nWelcome to the server..\";\n                                            delete embed[\"image\"];\n                                            memberJoined.send({\n                                                embed: embed\n                                            });\n                                        } else {\n                                            getCaptcha(attempts - 1, \"You did not enter the valid captcha!\");\n                                        }\n                                    })\n                                    .catch(err => {\n                                        fs.unlinkSync(`${fileTitle}.png`);\n                                        getCaptcha(attempts - 1, \"You had ran out of time!\");\n                                    });\n                            })\n                        });\n                    }\n                })\n            } else {\n                embed.color = 0xff0000;\n                embed.description = \"Captcha verfication failed!\\n\\nYou have ran out of attempts!\\nPlease rejoin the server to get the captcha again.\";\n                memberJoined.send({\n                    embed: embed\n                });\n            }\n        }\n\n\n    })\n}\n\n// VersionCheck:1",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    }
  ]
}