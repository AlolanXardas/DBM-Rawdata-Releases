{
  "name": "rolemenu",
  "permissions": "NONE",
  "restriction": "1",
  "_id": "DtBMG",
  "actions": [
    {
      "member": "1",
      "varName": "",
      "permission": "MANAGE_ROLES",
      "iftrue": "0",
      "iftrueVal": "",
      "iffalse": "1",
      "iffalseVal": "",
      "name": "Check Member Permissions"
    },
    {
      "info": "19",
      "storage": "1",
      "varName2": "botPrefix",
      "name": "Store Bot Client Info"
    },
    {
      "behavior": "1",
      "interpretation": "1",
      "code": "const botPrefix = tempVars('botPrefix');\nlet reactionArray = [];\nlet rectarray = globalVars('reactionRoleInf');\nconst _this = this;\nlet tempRole;\nlet emojiArray = [];\nlet roleArray = [];\nlet errorCatch = 5;\nlet localEmoji;\nlet localEmojiG;\n\nlet regex = /[^\\u0000-\\u00ff]/;\n\nfunction specCheck(str) {\n    if (!str.length) return false;\n    if (str.charCodeAt(0) > 255) return true;\n    return regex.test(str);\n}\n\n// Settings\nlet grabAllEmoji = false; // Set true if you want the bot to use global emojis from all the servers its in. (May cause slowdowns in larger servers)\n//\n\nif (grabAllEmoji) {\n    localEmoji = (client || this.getDBM().Bot.bot).emojis.array();\n    localEmojiG = \"Please make sure the emoji you selected is in one of the servers that the bot is in!\";\n} else {\n    localEmoji = msg.guild.emojis.array();\n    localEmojiG = \"Please make sure the emoji you selected is in this server!\";\n}\n\nmsg.channel.send(`Welcome to the autorole promt.\\nPlease now mention/name a role (case sensitive) along with an emoji.\\nEx. @role/role âœ…`)\n    .then((message) => {\n        msg.channel.awaitMessages(response => response.author.id == msg.author.id, {\n                max: 1,\n                time: 60000,\n                errors: ['time'],\n            })\n            .then(async function(collected) {\n                msg.author.lastMessage.delete();\n                if (collected.first().content.split(/ +/g).length > 1) {\n                    if (collected.first().content.split(/ +/g)[0] != null) {\n                        const tstValidRole = await msg.guild.roles.find(role => role.name === collected.first().content.split(/ +/g)[0]);\n                        if (collected.first().mentions.roles.first() || tstValidRole != null) {\n                            var unicodeStored = collected.first().content.split(/ +/g)[1];\n                            var roleMentioned;\n                            if (collected.first().mentions.roles.first() != null) {\n                                roleMentioned = collected.first().mentions.roles.first();\n                            } else {\n                                roleMentioned = tstValidRole;\n                            }\n                            if (specCheck(unicodeStored) || unicodeStored.includes(\"<:\") || unicodeStored.includes(\"<a:\")) {\n                                var emoj;\n                                if (unicodeStored.includes(\"<:\") || unicodeStored.includes(\"<a:\")) {\n                                    unicodeStored = unicodeStored.replace(/\\D/g, '');\n                                    emoji = localEmoji.filter(emojiT => emojiT.id == unicodeStored);\n                                    if (emoji.length > 0) {\n                                        unicodeStored = emoji[0];\n                                        reactionArray.push([unicodeStored, roleMentioned.id, roleMentioned.name]);\n                                        emojiArray.push(unicodeStored);\n                                        roleArray.push(roleMentioned.id);\n                                        message.edit(`You have attached the role **${roleMentioned.name}** to the reaction ${unicodeStored}.\\nIf this is correct, please respond \"confirm\".\\nIf not, please respond \"cancel\" to cancel the prompt.`);\n                                        msg.channel.awaitMessages(response => response.author.id == msg.author.id, {\n                                                max: 1,\n                                                time: 60000,\n                                                errors: ['time'],\n                                            })\n                                            .then((collected) => {\n                                                msg.author.lastMessage.delete();\n                                                if (collected.first().content.toLowerCase() == \"confirm\") {\n                                                    reAsk(message)\n                                                } else if (collected.first().content.toLowerCase() == \"cancel\") {\n                                                    message.delete();\n                                                    msg.channel.send(\"Prompt has been cancelled.\\nPlease re-execute the command to go through the prompt again!\");\n                                                } else {\n                                                    message.delete();\n                                                    msg.channel.send(\"Prompt has been cancelled, you didn't provide a valid response!\\nPlease re-execute the command to go through the prompt again!\");\n                                                }\n                                            }).catch(() => {\n                                                message.delete();\n                                                msg.channel.send('Sorry, you didnt provide a valid response in time!\\nPlease re-execute the command to go through the prompt again!');\n                                            });\n                                    } else {\n                                        message.delete();\n                                        msg.channel.send(`Prompt has been cancelled, you didn't provide a custom emoji!\\n${localEmojiG}\\nPlease re-execute the command to go through the prompt again!`);\n                                    }\n                                } else {\n                                    reactionArray.push([unicodeStored, roleMentioned.id, roleMentioned.name]);\n                                    emojiArray.push(unicodeStored);\n                                    roleArray.push(roleMentioned.id);\n                                    message.edit(`You have attached the role **${roleMentioned.name}** to the reaction ${unicodeStored}.\\nIf this is correct, please respond \"confirm\".\\nIf not, please respond \"cancel\" to cancel the prompt.`);\n                                    msg.channel.awaitMessages(response => response.author.id == msg.author.id, {\n                                            max: 1,\n                                            time: 60000,\n                                            errors: ['time'],\n                                        })\n                                        .then((collected) => {\n                                            msg.author.lastMessage.delete();\n                                            if (collected.first().content.toLowerCase() == \"confirm\") {\n                                                reAsk(message)\n                                            } else if (collected.first().content.toLowerCase() == \"cancel\") {\n                                                message.delete();\n                                                msg.channel.send(\"Prompt has been cancelled.\\nPlease re-execute the command to go through the prompt again!\");\n                                            } else {\n                                                message.delete();\n                                                msg.channel.send(\"Prompt has been cancelled, you didn't provide a valid response!\\nPlease re-execute the command to go through the prompt again!\");\n                                            }\n                                        }).catch(() => {\n                                            message.delete();\n                                            msg.channel.send('Sorry, you didnt provide a valid response in time!\\nPlease re-execute the command to go through the prompt again!');\n                                        });\n                                }\n                            } else {\n                                message.delete();\n                                msg.channel.send(\"Prompt has been cancelled, you didn't provide a valid emoji!\\nPlease re-execute the command to go through the prompt again!\");\n                            }\n\n                        } else {\n                            message.delete();\n                            msg.channel.send(\"Prompt has been cancelled, you didn't provide a valid response!\\nPlease re-execute the command to go through the prompt again!\");\n                        }\n                    } else {\n                        message.delete();\n                        msg.channel.send(\"Prompt has been cancelled, you didn't provide a valid mentioned role!\\nPlease re-execute the command to go through the prompt again!\");\n                    }\n                } else {\n                    message.delete();\n                    msg.channel.send(\"Prompt has been cancelled, you didn't provide a emoji/mentioned role!\\nPlease re-execute the command to go through the prompt again!\");\n                }\n            }).catch((error) => {\n                console.log(error);\n                message.delete();\n                msg.channel.send('Sorry, you didnt provide a valid response in time!\\nPlease re-execute the command to go through the prompt again!');\n            });\n    })\n\nfunction reAsk(message, extra) {\n    if (extra == null) {\n        extra = \" \";\n    }\n    if (reactionArray.length != 10) {\n        var finalText = \"\";\n        reactionArray.forEach(subarray => {\n            finalText = finalText + `${subarray[0]} => ${subarray[2]}\\n`\n        })\n        message.edit(`So far you have the following connections (Max 10)\\n ${finalText}\\n\\nIf you would like to attach another reaction to a role, please insert a role along with an emoji.\\nIf not, please reply with \"done\".\\nIf you would like to cancel the prompt, please respond with \"cancel\"\\n${extra}`);\n        msg.channel.awaitMessages(response => response.author.id == msg.author.id, {\n                max: 1,\n                time: 60000,\n                errors: ['time'],\n            })\n            .then(async function(collected) {\n                msg.author.lastMessage.delete();\n                if (collected.first().content.toLowerCase() == \"done\") {\n                    done(message)\n                } else if (collected.first().content.toLowerCase() == \"cancel\") {\n                    message.delete();\n                    msg.channel.send(\"Prompt has been cancelled.\\nPlease re-execute the command to go through the prompt again!\");\n                } else {\n                    if (collected.first().content.split(/ +/g).length > 1) {\n                        const tstValidRole = await msg.guild.roles.find(role => role.name === collected.first().content.split(/ +/g)[0]);\n                        if (collected.first().mentions.roles.first() || tstValidRole != null) {\n                            var unicodeStored = collected.first().content.split(/ +/g)[1];\n                            if (collected.first().mentions.roles.first() != null) {\n                                roleMentioned = collected.first().mentions.roles.first();\n                            } else {\n                                roleMentioned = tstValidRole;\n                            }\n                            if (unicodeStored != null) {\n                                if (!emojiArray.includes(unicodeStored)) {\n                                    if (!roleArray.includes(roleMentioned.id)) {\n                                        if (specCheck(unicodeStored) || unicodeStored.includes(\"<:\") || unicodeStored.includes(\"<a:\")) {\n                                            var emoji;\n                                            if (unicodeStored.includes(\"<:\") || unicodeStored.includes(\"<a:\")) {\n                                                unicodeStored = unicodeStored.replace(/\\D/g, '');\n                                                emoji = localEmoji.filter(emojiT => emojiT.id == unicodeStored);\n                                                if (emoji.length > 0) {\n                                                    unicodeStored = emoji[0];\n                                                    reactionArray.push([unicodeStored, roleMentioned.id, roleMentioned.name]);\n                                                    emojiArray.push(unicodeStored);\n                                                    roleArray.push(roleMentioned.id);\n                                                    reAsk(message);\n                                                } else {\n                                                    if (errorCatch > 0) {\n                                                        errorCatch -= 1;\n                                                        reAsk(message, `Please provide a valid custom emoji!\\n${localEmojiG}\\nTries left - ${errorCatch}`);\n                                                    } else {\n                                                        message.delete();\n                                                        msg.channel.send(`Prompt has been cancelled, you provided an invalid custom emoji!\\n${localEmojiG}\\nPlease re-execute the command to go through the prompt again!`);\n                                                    }\n                                                }\n                                            } else {\n                                                reactionArray.push([unicodeStored, roleMentioned.id, roleMentioned.name]);\n                                                emojiArray.push(unicodeStored);\n                                                roleArray.push(roleMentioned.id);\n                                                reAsk(message);\n                                            }\n\n                                        } else {\n\n                                            if (errorCatch > 0) {\n                                                errorCatch -= 1;\n                                                reAsk(message, `Please don't use the same emoji twice!\\nTries left - ${errorCatch}`)\n                                            } else {\n                                                message.delete();\n                                                msg.channel.send(\"Prompt has been cancelled, you used the same emoji twice for differnt roles!\\nPlease re-execute the command to go through the prompt again!\");\n                                            }\n                                        }\n                                    } else {\n                                        if (errorCatch > 0) {\n                                            errorCatch -= 1;\n                                            reAsk(message, `Please don't use the same role twice!\\nTries left - ${errorCatch}`)\n                                        } else {\n                                            message.delete();\n                                            msg.channel.send(\"Prompt has been cancelled, you used the same role twice in the prompt!\\nPlease re-execute the command to go through the prompt again!\");\n                                        }\n                                    }\n                                } else {\n                                    if (errorCatch > 0) {\n                                        errorCatch -= 1;\n                                        reAsk(message, `Please provide a valid emoji!\\nTries left - ${errorCatch}`)\n                                    } else {\n                                        message.delete();\n                                        msg.channel.send(\"Prompt has been cancelled, you didn't provide a valid emoji!\\nPlease re-execute the command to go through the prompt again!\");\n                                    }\n                                }\n                            }\n                        } else {\n                            if (errorCatch > 0) {\n                                errorCatch -= 1;\n                                reAsk(message, `Please mention a valid role!\\nTries left - ${errorCatch}`)\n                            } else {\n                                message.delete();\n                                msg.channel.send(\"Prompt has been cancelled, you didn't mention a valid role!\\nPlease re-execute the command to go through the prompt again!\");\n                            }\n                        }\n                    } else {\n                        if (errorCatch > 0) {\n                            errorCatch -= 1;\n                            reAsk(message, `Please provide a valid emoji/role!\\nTries left - ${errorCatch}`)\n                        } else {\n                            message.delete();\n                            msg.channel.send(\"Prompt has been cancelled, you didn't provide a emoji/mentioned role!\\nPlease re-execute the command to go through the prompt again!\");\n                        }\n                    }\n                }\n            }).catch(() => {\n                message.delete();\n                msg.channel.send('Sorry, you didnt provide a valid response in time!\\nPlease re-execute the command to go through the prompt again!');\n            });\n    } else {\n        done(message);\n    }\n\n}\n\nfunction done(message) {\n    var finalText = \"\";\n    reactionArray.forEach(subarray => {\n        finalText = finalText + `${subarray[0]} => ${subarray[2]}\\n`\n    })\n    message.edit(`Final conformation menu\\n\\nBelow is the list of reactions to their roles\\n${finalText}\\n\\nIf this is correct, please respond with a mention to a text channel where the role menu will be sent.\\nIf this isn't correct, respond with \"cancel\" to cancel the prompt.`)\n    msg.channel.awaitMessages(response => response.author.id == msg.author.id, {\n            max: 1,\n            time: 60000,\n            errors: ['time'],\n        })\n        .then((collected) => {\n            msg.author.lastMessage.delete();\n            if (collected.first().mentions.channels.first()) {\n                var menchannel = collected.first().mentions.channels.first()\n                message.delete();\n                menchannel.send({\n                        embed: {\n                            color: 0xffff00,\n                            title: \"Role Reaction Menu\",\n                            description: `React with the reaction listed to get the listed role for that reaction.\\n${finalText}`,\n                            timestamp: new Date()\n                        }\n                    })\n                    .then(embedmessage => {\n                        reactionArray.forEach(async function(subarray) {\n                            await embedmessage.react(subarray[0])\n                        })\n\n                        rectarray[embedmessage.id] = reactionArray\n                        _this.storeValue(rectarray, 3, \"reactionRoleInf\", cache);\n                        _this.callNextAction(cache);\n                    })\n            } else if (collected.first().content == \"cancel\") {\n                message.delete();\n                msg.channel.send(\"Prompt has been cancelled.\\nPlease re-execute the command to go through the prompt again!\");\n            } else {\n                message.delete();\n                msg.channel.send(\"Prompt has been cancelled, you didn't provide a valid response!\\nPlease re-execute the command to go through the prompt again!\");\n            }\n        }).catch(() => {\n            message.delete();\n            msg.channel.send('Sorry, you didnt provide a valid response in time!\\nPlease re-execute the command to go through the prompt again!');\n        });\n}",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    },
    {
      "behavior": "0",
      "interpretation": "1",
      "code": "function ccstringify(object) {\n    var cache = [];\n    var str = JSON.stringify(object,\n    \n        function(key, value) {\n            if (typeof value === 'object' && value !== null) {\n                if (cache.indexOf(value) !== -1) {\n                    return;\n                }\n               \n                cache.push(value);\n            }\n            return value;\n        }, 4);\n    cache = null; \n    return str;\n};\n\n\nvar randomVar = ccstringify(globalVars(\"reactionRoleInf\"));\n\nthis.storeValue(randomVar, 3, 'tempData', cache);",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    },
    {
      "storage": "3",
      "varName": "tempData",
      "name": "Save Variable"
    }
  ],
  "comType": "0"
}