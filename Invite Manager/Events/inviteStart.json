{
  "name": "inviteStart",
  "temp": "",
  "event-type": "1",
  "_id": "EqQxg",
  "actions": [
    {
      "behavior": "1",
      "interpretation": "1",
      "code": "    // event\n    if (globalVars(\"inviteManagerRanAlready\") == null) {\n        var inviteDatabase = {};\n        var checkUpdates = true;\n\n        Actions.storeValue(true, 3, \"inviteManagerRanAlready\", cache);\n\n        const fs = require('fs');\n        const request = require('request');\n\n        if (checkUpdates) {\n            request('https://raw.githubusercontent.com/ItzPike/DBM-Rawdata-Releases/master/Invite%20Manager/versionCheck.json', function(error, response, body) {\n                if (response.statusCode == 200) {\n                    var allVersions = JSON.parse(body);\n\n                    var commandVersions = {};\n                    var eventVersions = {};\n                    var commandKeys = [];\n                    var eventKeys = [];\n\n                    allVersions[\"commands\"].forEach(commandVer => {\n                        commandVersions[commandVer[0]] = commandVer[1];\n                        commandKeys.push(commandVer[0]);\n                    });\n\n                    allVersions[\"events\"].forEach(eventVer => {\n                        eventVersions[eventVer[0]] = eventVer[1];\n                        eventKeys.push(eventVer[0])\n                    })\n\n                    fs.readFile(\"./data/commands.json\", async function(err, data) {\n                        var data = JSON.parse(data);\n\n                        var systemCommands = await data.filter(command => command != null && commandKeys.includes(command[\"_id\"]));\n\n                        for (i = 0; i < systemCommands.length; i++) {\n                            var systemActionFind = await systemCommands[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                            if (systemActionFind.length != 0) {\n                                var versionCheckSplit = systemActionFind[0].code.split(\"VersionCheck:\");\n                                if (versionCheckSplit[1] != null && versionCheckSplit[1] != commandVersions[systemCommands[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                    console.log(`[Invite Manager] The command ${systemCommands[i][\"name\"]} needs an update!`)\n                                }\n                            }\n                        }\n                    })\n\n                    fs.readFile(\"./data/events.json\", async function(err, data) {\n                        var data = JSON.parse(data);\n\n                        var systemEvent = await data.filter(event => event != null && eventKeys.includes(event[\"_id\"]));\n\n                        for (i = 0; i < systemEvent.length; i++) {\n                            var systemEventFind = await systemEvent[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                            if (systemEventFind.length != 0) {\n                                var versionCheckSplit = systemEventFind[0].code.split(\"VersionCheck:\");\n                                if (versionCheckSplit != null && versionCheckSplit[versionCheckSplit.length - 1] != eventVersions[systemEvent[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                    console.log(`[Invite Manager] The event ${systemEvent[i][\"name\"]} needs an update!`)\n                                }\n                            }\n                        }\n                    })\n                }\n            });\n        }\n\n        Actions.inviteModifyData = function(userID, guildID, valueChange, invalidReal) {\n            invalidReal = invalidReal;\n            if (invalidReal == 1 || invalidReal == 0) {\n                if (invalidreal == 1) {\n                    invalidReal = \"real\";\n                } else {\n                    invalidReal = \"invalid\";\n                }\n\n                if (!isNaN(valueChange)) {\n                    var invitePData = globalVars('invitePData');\n                    var inviterData = invitePData[\"inviterData\"];\n\n                    if (!checkProperty(inviterData, guildID)) {\n                        inviterData[guildID] = {};\n                    }\n\n                    if (!checkProperty(inviterData[guildID], userID)) {\n                        inviterData[guildID][userID] = {\n                            \"invites\": [],\n                            \"data\": {\n                                \"real\": 0,\n                                \"invalid\": 0\n                            }\n                        };\n                    }\n\n\n                    inviterData[guildID][userID][\"data\"][invalidReal] += valueChange;\n                    if (inviterData[guildID][userID][\"data\"][invalidReal] < 0) {\n                        inviterData[guildID][userID][\"data\"][invalidReal] = 0;\n                    }\n\n                    writeToData(\"inviteManagerData\", invitePData, \"invitePData\");\n\n                    return \"success\";\n\n                } else {\n                    return \"failed - Invalid value\";\n                }\n            } else {\n                return \"failed - Invalid value change selection\";\n            }\n        }\n\n        Actions.inviteGet = function(userID, guildID, invalidReal) {\n            invalidReal = invalidReal;\n            if (invalidReal == 1 || invalidReal == 0) {\n                if (invalidreal == 1) {\n                    invalidReal = \"real\";\n                } else {\n                    invalidReal = \"invalid\";\n                }\n\n                var invitePData = globalVars('invitePData');\n                var inviterData = invitePData[\"inviterData\"];\n\n                if (checkProperty(inviterData, guildID) && checkProperty(inviterData[guildID], userID)) {\n                    return inviterData[guildID][userID][\"data\"][invalidReal];\n                } else {\n                    return \"failed - No data found\";\n                }\n            } else {\n                return \"failed - Invalid value change selection\";\n            }\n        }\n\n        Actions.fetchDatabase = function() {\n            return inviteDatabase;\n        }\n\n        client.guilds.cache.forEach(g => {\n            g.fetchInvites().then(guildInvites => {\n                try {\n                    inviteDatabase[g.id] = guildInvites;\n                } catch (error) {\n                    console.log(error);\n                }\n            });\n        });\n\n\n        checkReadFile(\"inviteManagerData\", {\n            \"inviterData\": {},\n            \"invitedData\": {}\n        }, \"invitePData\");\n        checkReadFile(\"inviteManagerSettings\", {}, \"inviteSettings\");\n        checkReadFile(\"inviteManagerInviteData\", {}, \"inviteData\");\n\n\n\n        client.on('guildMemberAdd', (member) => {\n            var invitePData = globalVars('invitePData');\n            var inviteSettings = globalVars('inviteSettings');\n            var inviteData = globalVars('inviteData');\n\n            var memberGuild = member.guild;\n            var memberGuildID = memberGuild.id;\n\n            var guildInv = inviteDatabase[memberGuildID];\n\n            memberGuild.fetchInvites().then(guildInvites => {\n                inviteDatabase[memberGuildID] = guildInvites;\n                const invited = guildInvites.find(i => guildInv.get(i.code).uses < i.uses);\n                const inviter = client.users.cache.get(invited.inviter.id);\n\n                var inviterID = inviter.id.toString();\n                var invitedID = member.id.toString();\n\n                if (!checkProperty(inviteData, invited.code)) {\n                    inviteData[invited.code] = [];\n                }\n\n                var memInviteDataIndex = inviteData[invited.code].findIndex(memberN => memberN == member.id);\n                if (memInviteDataIndex == -1) {\n                    inviteData[invited.code].push(member.id);\n                } else {\n                    inviteData[invited.code].splice(memInviteDataIndex, 1);\n                    inviteData[invited.code].push(member.id);\n                }\n\n                writeToData(\"inviteManagerInviteData\", inviteData, \"inviteData\");\n\n\n                var memberTime = member.user.createdTimestamp / 1000;\n                var currentTime = Math.floor(Date.now() / 1000);\n\n                var memberAge = Math.floor((currentTime - memberTime) / 86400);\n\n\n                if (!checkProperty(invitePData['inviterData'], memberGuildID)) {\n                    invitePData['inviterData'][memberGuildID] = {};\n                }\n                if (!checkProperty(invitePData['inviterData'][memberGuildID], inviterID)) {\n                    invitePData['inviterData'][memberGuildID][inviterID] = {\n                        \"invites\": [],\n                        \"data\": {\n                            \"real\": 0,\n                            \"invalid\": 0\n                        }\n                    };\n                }\n\n\n\n                if (!checkProperty(invitePData['invitedData'], memberGuildID)) {\n                    invitePData['invitedData'][memberGuildID] = {};\n                }\n                if (!checkProperty(invitePData['invitedData'][memberGuildID], invitedID)) {\n                    invitePData['invitedData'][memberGuildID][invitedID] = []\n                }\n\n\n                var inviterData = invitePData['inviterData'][memberGuildID][inviterID];\n                var invitedData = invitePData['invitedData'][memberGuildID][invitedID];\n\n                for (i = 0; i < inviterData[\"invites\"].length; i++) {\n                    if (inviterData[\"invites\"][i][\"id\"] == invitedID) {\n                        if (inviterData[\"invites\"][i][\"valid\"]) {\n                            inviterData[\"data\"][\"real\"] -= 1;\n                        } else {\n                            inviterData[\"data\"][\"invalid\"] -= 1;\n                        }\n                        inviterData[\"invites\"].splice(i, 1);\n                    }\n                }\n\n                inviterData[\"invites\"].push({\n                    \"id\": member.id,\n                    \"time\": currentTime,\n                    \"codeUsed\": invited.code,\n                    \"valid\": true,\n                    \"invalidCause\": \"\"\n                });\n\n                if (checkProperty(inviteSettings, memberGuildID) && inviteSettings[memberGuildID][\"invalidize\"][\"age_check\"][\"enabled\"]) {\n                    if (memberAge >= inviteSettings[memberGuildID][\"invalidize\"][\"age_check\"][\"minimum\"]) {\n                        inviterData[\"data\"][\"real\"] += 1;\n                    } else {\n                        var latestIndex = inviterData[\"invites\"].length - 1;\n                        inviterData[\"invites\"][latestIndex].valid = false;\n                        inviterData[\"invites\"][latestIndex].invalidCause = \"Player did not meet the minimum account age on join.\";\n                        inviterData[\"data\"][\"invalid\"] += 1;\n                    }\n                } else {\n                    inviterData[\"data\"][\"real\"] += 1;\n                }\n\n                for (i = 0; i < invitedData.length; i++) {\n                    if (invitedData[i] == inviterID) {\n                        invitedData.splice(i, 1);\n                    }\n                }\n\n                invitedData.push(inviterID);\n\n                writeToData(\"inviteManagerData\", invitePData, \"invitePData\");\n\n                if (checkProperty(inviteSettings, memberGuildID)) {\n                    if (inviteSettings[memberGuildID][\"logging\"][\"enabled\"]) {\n                        var fetchedChannel = memberGuild.channels.cache.get(inviteSettings[memberGuildID][\"logging\"][\"channel\"]);\n\n                        if (fetchedChannel != null) {\n\n\n                            var guildData = invitePData[\"inviterData\"][memberGuildID];\n                            var inviteArr = [];\n\n                            var objectKeys = Object.keys(guildData);\n\n                            sortedItems = \"\";\n                            for (i = 0; i < objectKeys.length; i++) {\n                                var keyIndex = objectKeys[i];\n                                guildData[keyIndex][\"id\"] = keyIndex;\n                                inviteArr.push(guildData[keyIndex]);\n                            }\n\n                            var sortedArr = inviteArr.sort(function(a, b) {\n                                return a[\"data\"][\"real\"] - b[\"data\"][\"invalid\"]\n                            });\n\n                            var leaderboardStanding = sortedArr.findIndex(userData => userData[\"id\"] == inviterID) + 1;\n\n\n                            var format = inviteSettings[memberGuildID][\"logging\"][\"format\"]\n                            fetchedChannel.send({\n                                embed: {\n                                    title: `Welcome to ${memberGuild.name}!`,\n                                    description: format.replace('{user1}', `${member}`).replace('{user2}', `${inviter}`).replace('{code}', `${invited.code}`).replace('{uses}', `${invited.uses}`),\n                                    thumbnail: {\n                                        url: member.user.avatarURL(),\n                                    },\n                                    fields: [{\n                                            name: '👤 Inviter',\n                                            value: inviter,\n                                            inline: true,\n                                        },\n                                        {\n                                            name: '✅ Real Invites',\n                                            value: inviterData[\"data\"][\"real\"],\n                                            inline: true,\n                                        },\n                                        {\n                                            name: '🏆 Rank',\n                                            value: `#${leaderboardStanding}`,\n                                            inline: true,\n                                        }\n                                    ],\n                                    \"color\":0x00ff00,\n                                    timestamp: new Date()\n                                }\n                            });\n                        } else {\n                            inviteSettings[memberGuildID][\"logging\"][\"enabled\"] = false;\n                            inviteSettings[memberGuildID][\"logging\"][\"channel\"] = \"0\";\n\n                            writeToData(\"inviteManagerSettings\", inviteSettings, \"inviteSettings\");\n                        }\n                    }\n                }\n\n            });\n        });\n\n        client.on('guildMemberRemove', async (member) => {\n            var invitePData = globalVars('invitePData');\n            var memberGuild = member.guild;\n            var memberGuildID = memberGuild.id;\n            var invitedData = invitePData['invitedData'];\n            if (checkProperty(invitedData, memberGuildID) && checkProperty(invitedData[memberGuildID], member.id) && invitedData[memberGuildID][member.id].length != 0) {\n                var memberInviters = invitedData[memberGuildID][member.id];\n                var inviterData = invitePData['inviterData'][memberGuildID][memberInviters[memberInviters.length - 1]];\n\n                var findInviteIndex = inviterData[\"invites\"].findIndex(inviteMem => inviteMem.id == member.id);\n                if (inviterData[\"invites\"][findInviteIndex][\"valid\"]) {\n                    inviterData[\"invites\"][findInviteIndex][\"valid\"] = false;\n                    inviterData[\"invites\"][findInviteIndex][\"invalidCause\"] = \"User had left the server\";\n\n                    inviterData[\"data\"][\"invalid\"] += 1;\n                    inviterData[\"data\"][\"real\"] -= 1;\n                }\n\n                writeToData(\"inviteManagerData\", invitePData, \"invitePData\");\n            }\n        });\n\n        client.on('guildCreate', (guild) => {\n            guild.fetchInvites(invites => {\n                inviteDatabase[guild.id] = invites;\n            })\n        });\n\n        client.on('inviteCreate', (invite) => {\n            if (inviteDatabase[invite.guild.id] == null) {\n                inviteDatabase[invite.guild.id] = new Map();\n            }\n            inviteDatabase[invite.guild.id].set(invite.code, invite);\n        })\n\n        function checkReadFile(name, format, dataname) {\n            if (fs.existsSync(`./data/${name}.json`)) {\n                fs.readFile(`./data/${name}.json`, function read(err, data) {\n                    if (err) {\n                        throw err;\n                    }\n                    data = JSON.parse(data)\n\n                    Actions.storeValue(data, 3, dataname, cache);\n                });\n            } else {\n                writeToData(name, format, dataname);\n            }\n        }\n\n        function writeToData(name, data, dataname) {\n            fs.writeFile(`./data/${name}.json`, JSON.stringify(data), function(err) {\n                if (err) {\n                    return console.log(err);\n                }\n\n                Actions.storeValue(data, 3, dataname, cache);\n            });\n        }\n\n        function checkProperty(item, check) {\n            if (item[check] == null) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    }\n\n    // VersionCheck:4",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    }
  ]
}