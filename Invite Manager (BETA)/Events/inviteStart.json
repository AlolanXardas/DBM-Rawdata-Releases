{
    "name": "inviteStart",
    "temp": "",
    "event-type": "1",
    "_id": "EqQxg",
    "actions": [
      {
        "behavior": "1",
        "interpretation": "1",
        "code": "// event\nconst fs = require('fs');\n\nif (globalVars(\"inviteManagerRanAlready\") == null) {\n    this.storeValue(true, 3, \"inviteManagerRanAlready\", cache);\n\n    var invites = {};\n\n    client.guilds.cache.forEach(g => {\n        g.fetchInvites().then(guildInvites => {\n            try {\n                invites[g.id] = guildInvites;\n            } catch (error) {\n                console.log(error);\n            }\n        });\n    });\n\n\n    checkReadFile(\"inviteManagerData\", {\"inviterData\": {},\"invitedData\": {}}, \"invitePData\")\n    checkReadFile(\"inviteManagerSettings\", {}, \"inviteSettings\")\n    checkReadFile(\"inviteManagerInviteData\", {}, \"inviteData\")\n\n    Actions.storeValue(invites, 3, \"inviteDatabase\", cache);\n\n\n\n    client.on('guildMemberAdd', (member) => {\n\n        var guildDatabase = globalVars('inviteDatabase');\n        var invitePData = globalVars('invitePData');\n        var inviteSettings = globalVars('inviteSettings');\n        var inviteData = globalVars('inviteData');\n\n        var memberGuild = member.guild;\n        var memberGuildID = memberGuild.id;\n        const guildInv = guildDatabase[memberGuildID];\n\n        memberGuild.fetchInvites().then(guildInvites => {\n            guildInv[memberGuildID] = guildInvites;\n            const invited = guildInvites.find(i => guildInv.get(i.code).uses < i.uses);\n            const inviter = client.users.cache.get(invited.inviter.id);\n\n            var inviterID = inviter.id.toString();\n            var invitedID = member.id.toString();\n\n\n            Actions.storeValue(guildDatabase, 3, \"inviteDatabase\", cache);\n\n            if (!checkProperty(inviteData, invited.code)) {\n                inviteData[invited.code] = [];\n            }\n\n            var memInviteDataIndex = inviteData[invited.code].findIndex(memberN => memberN == member.id);\n            if (memInviteDataIndex == -1) {\n                inviteData[invited.code].push(member.id);\n            } else {\n                inviteData[invited.code].splice(memInviteDataIndex, 1);\n                inviteData[invited.code].push(member.id);\n            }\n\n            writeToData(\"inviteManagerInviteData\", inviteData, \"inviteData\");\n\n\n            var memberTime = member.user.createdTimestamp / 1000;\n            var currentTime = Math.floor(Date.now() / 1000);\n\n            var memberAge = Math.floor((currentTime - memberTime) / 86400);\n\n\n            if (!checkProperty(invitePData['inviterData'], memberGuildID)) {\n                invitePData['inviterData'][memberGuildID] = {};\n            }\n            if (!checkProperty(invitePData['inviterData'][memberGuildID], inviterID)) {\n                invitePData['inviterData'][memberGuildID][inviterID] = {\"invites\":[],\"data\":{\"real\":0,\"invalid\":0}};\n            }\n\n\n\n            if (!checkProperty(invitePData['invitedData'], memberGuildID)) {\n                invitePData['invitedData'][memberGuildID] = {};\n            }\n            if (!checkProperty(invitePData['invitedData'][memberGuildID], invitedID)) {\n                invitePData['invitedData'][memberGuildID][invitedID] = []\n            }\n\n\n            var inviterData = invitePData['inviterData'][memberGuildID][inviterID];\n            var invitedData = invitePData['invitedData'][memberGuildID][invitedID];\n\n            for (i=0; i<inviterData[\"invites\"].length; i++) {\n                if (inviterData[\"invites\"][i][\"id\"] == invitedID) {\n                    if (inviterData[\"invites\"][i][\"valid\"]) {\n                        inviterData[\"data\"][\"real\"] -= 1;\n                    } else {\n                        inviterData[\"data\"][\"invalid\"] -= 1;\n                    }\n                    inviterData[\"invites\"].splice(i, 1);\n                }\n            }\n\n            inviterData[\"invites\"].push({\n                \"id\": member.id,\n                \"time\": currentTime,\n                \"codeUsed\": invited.code,\n                \"valid\": true,\n                \"invalidCause\": \"\"\n            });\n\n            if (checkProperty(inviteSettings, memberGuildID)) {\n                if (inviteSettings[memberGuildID][\"invalidize\"][\"age_check\"][\"enabled\"]) {\n                    if (memberAge >= inviteSettings[memberGuildID][\"invalidize\"][\"age_check\"][\"minimum\"]) {\n                        inviterData[\"data\"][\"real\"] += 1;\n                    } else {\n                        var latestIndex = inviterData[\"invites\"].length - 1;\n                        inviterData[\"invites\"][latestIndex].valid = false;\n                        inviterData[\"invites\"][latestIndex].invalidCause = \"Player did not meet the minimum account age on join.\";\n                        inviterData[\"data\"][\"invalid\"] += 1;\n                    }\n                }\n            } else {\n                inviterData[\"data\"][\"real\"] += 1;\n            }\n\n            for (i=0; i<invitedData.length; i++) {\n                if (invitedData[i] == inviterID) {\n                    invitedData.splice(i, 1);\n                }\n            }\n\n            invitedData.push(inviterID);\n\n            writeToData(\"inviteManagerData\", invitePData, \"invitePData\");\n\n            if (checkProperty(inviteSettings, memberGuildID)) {\n                if (inviteSettings[memberGuildID][\"logging\"][\"enabled\"]) {\n                    var fetchedChannel = memberGuild.channels.cache.get(inviteSettings[memberGuildID][\"logging\"][\"channel\"]);\n\n                    if (fetchedChannel != null) {\n                        var format = inviteSettings[memberGuildID][\"logging\"][\"format\"]\n                        fetchedChannel.send({\n                            embed: {\n                                description: format.replace('{user1}', `${member}`).replace('{user2}', `${inviter}`).replace('{code}', `${invited.code}`).replace('{uses}', `${invited.uses}`)\n                            }\n                        });\n                    } else {\n                        inviteSettings[memberGuildID][\"logging\"][\"enabled\"] = false;\n                        inviteSettings[memberGuildID][\"logging\"][\"channel\"] = \"0\";\n\n                        writeToData(\"inviteManagerSettings\", inviteSettings, \"inviteSettings\");\n                    }\n                }\n            }\n\n        });\n    });\n\n    client.on('guildMemberRemove', async (member) => {\n        var invitePData = globalVars('invitePData');\n        var memberGuild = member.guild;\n        var memberGuildID = memberGuild.id;\n        var invitedData = invitePData['invitedData'];\n        if (checkProperty(invitedData, memberGuildID) && checkProperty(invitedData[memberGuildID], member.id) && invitedData[memberGuildID][member.id].length != 0) {\n            var memberInviters = invitedData[memberGuildID][member.id];\n            var inviterData = invitePData['inviterData'][memberGuildID][memberInviters[memberInviters.length - 1]];\n\n            var findInviteIndex = inviterData[\"invites\"].findIndex(inviteMem => inviteMem.id == member.id);\n            if (inviterData[\"invites\"][findInviteIndex][\"valid\"]) {\n                inviterData[\"invites\"][findInviteIndex][\"valid\"] = false;\n                inviterData[\"invites\"][findInviteIndex][\"invalidCause\"] = \"User had left the server\";\n\n                inviterData[\"data\"][\"invalid\"] += 1;\n                inviterData[\"data\"][\"real\"] -= 1;\n            }\n\n            writeToData(\"inviteManagerData\", invitePData, \"invitePData\");\n        }\n    });\n\n    client.on('guildCreate', (guild) => {\n        var inviteDatabase = globalVars(\"inviteDatabase\");\n\n        guild.fetchInvites(invites => {\n            inviteDatabase[guild.id] = invites;\n            Actions.storeValue(inviteDatabase, 3, \"inviteDatabase\", cache);\n        })\n    });\n}\n\n\nfunction checkReadFile(name, format, dataname) {\n    if (fs.existsSync(`./data/${name}.json`)) {\n        fs.readFile(`./data/${name}.json`, function read(err, data) {\n            if (err) {\n                throw err;\n            }\n            data = JSON.parse(data)\n\n            Actions.storeValue(data, 3, dataname, cache);\n        });\n    } else {\n        writeToData(\"inviteManagerInviteData\", format, dataname);\n    }\n}\n\nfunction writeToData(name, data, dataname) {\n    fs.writeFile(`./data/${name}.json`, JSON.stringify(data), function(err) {\n        if (err) {\n            return console.log(err);\n        }\n    });\n\n    Actions.storeValue(data, 3, dataname, cache);\n}\n\nfunction checkProperty(item, check) {\n    if (item[check] == null) {\n        return false;\n    } else {\n        return true;\n    }\n}",
        "storage": "0",
        "varName": "",
        "name": "Run Script"
      }
    ]
  }